configurations {
    jaxb
    openjpa
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
    }
}

ext.springVersion =       '3.2.4.RELEASE'
ext.springWsVersion =  	  '2.1.4.RELEASE'
ext.springSecVersion =    '3.1.0.RELEASE'

apply plugin: 'war'
apply plugin: 'tomcat'


task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/webapp/messages.xsd"

    inputs.files schema
    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "org.springframework.ws.samples.airline.schema") {
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}


dependencies {
    compile(files(genJaxb.classesDir).builtBy(genJaxb))

    // Spring-WS
    compile("org.springframework.ws:spring-ws-core:$springWsVersion")
    compile("org.springframework.ws:spring-ws-security:$springWsVersion") {
        exclude group: 'com.sun.xml.wsit', module: 'wsit-rt'
        exclude group: 'com.sun.xml.wsit', module: 'xws-security'
    }

    runtime("org.springframework.ws:spring-ws-support:$springWsVersion")

    // Spring
    runtime("org.springframework:spring-orm:$springVersion")
    testCompile("org.springframework:spring-jdbc:$springVersion")
    testCompile("org.springframework:spring-test:$springVersion")

    // Spring Security
    runtime("org.springframework.security:spring-security-core:$springSecVersion")
    runtime("org.springframework.security:spring-security-config:$springSecVersion")
    runtime("org.springframework.security:spring-security-web:$springSecVersion")

    // JEE
    runtime("javax.servlet:jstl:1.2")

    // ORM
    compile("org.apache.openjpa:openjpa:1.2.3")
    runtime("commons-dbcp:commons-dbcp:1.2.1") {
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xerces', module: 'xerces'
    }
    runtime("hsqldb:hsqldb:1.8.0.7")

    // Various
    runtime("org.apache.activemq:activemq-core:4.1.2")
    runtime("org.apache.derby:derby:10.3.1.4")
    runtime("org.apache.ws.xmlschema:xmlschema-core:2.0.2")
    runtime("com.sun.xml.wss:xws-security:3.0") {
        exclude group: 'javax.xml.crypto', module: 'xmldsig'
    }
    runtime("joda-time:joda-time-jsptags:1.1.1")

    runtime("log4j:log4j:1.2.16")


    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    openjpa "org.apache.openjpa:openjpa:1.2.3"

}